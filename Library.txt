local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")

local Library = {
    Theme = {
        Font = "GothamBlack",
        Accent = Color3.fromRGB(72, 138, 182),
        AcrylicMain = Color3.fromRGB(30, 30, 30),
        AcrylicBorder = Color3.fromRGB(60, 60, 60),
        TitleBarLine = Color3.fromRGB(65, 65, 65),
        Element = Color3.fromRGB(70, 70, 70),
        ElementBorder = Color3.fromRGB(100, 100, 100),
        InElementBorder = Color3.fromRGB(55, 55, 55),
        ElementTransparency = 0.82,
        FontColor = Color3.fromRGB(255, 255, 255),
        HideKey = "LeftAlt"
    }
}

local CreateModule = {
    reg = {}
}

local function AddToReg(Instance)
    table.insert(CreateModule.reg, Instance)
end

function CreateModule.Instance(instance, properties)
    local CreatedInstance = Instance.new(instance)
    for property, value in pairs(properties) do
        CreatedInstance[property] = value
    end
    return CreatedInstance
end

function Library.Main(Name)
    for _, v in pairs(game.CoreGui:GetChildren()) do
        if v.Name == "DarkSquareLib" then
            v:Destroy()
        end
    end

    local DarkSquareLib = CreateModule.Instance("ScreenGui", {
        Name = "DarkSquareLib",
        Parent = game.CoreGui,
        ResetOnSpawn = false
    })

    local MainFrame = CreateModule.Instance("Frame", {
        Name = "MainFrame",
        Parent = DarkSquareLib,
        BackgroundColor3 = Library.Theme.AcrylicMain,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -150, 0.5, -150),
        Size = UDim2.new(0, 300, 0, 300),
        Active = true,
        Draggable = true,
        Visible = false,
        ZIndex = 3
    })

    CreateModule.Instance("UICorner", {
        Parent = MainFrame,
        Name = "Corner",
        CornerRadius = UDim.new(0, 8)
    })

    CreateModule.Instance("UIStroke", {
        Parent = MainFrame,
        Name = "Stroke",
        Thickness = 1,
        Color = Library.Theme.AcrylicBorder,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    })

    local Title = CreateModule.Instance("TextLabel", {
        Parent = MainFrame,
        Name = "Title",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 5),
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font[Library.Theme.Font],
        Text = Name,
        TextColor3 = Library.Theme.FontColor,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Center,
        ZIndex = 4
    })

    local TitleLine = CreateModule.Instance("Frame", {
        Parent = MainFrame,
        Name = "TitleLine",
        BackgroundColor3 = Library.Theme.TitleBarLine,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 35),
        Size = UDim2.new(1, 0, 0, 1),
        ZIndex = 3
    })

    local Container = CreateModule.Instance("ScrollingFrame", {
        Parent = MainFrame,
        Name = "Container",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 40),
        Size = UDim2.new(1, -20, 1, -50),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        ScrollBarThickness = 3,
        ScrollBarImageTransparency = 0.9,
        ScrollBarImageColor3 = Library.Theme.FontColor,
        ZIndex = 3
    })

    local ElementList = CreateModule.Instance("UIListLayout", {
        Parent = Container,
        Padding = UDim.new(0, 5),
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
    })

    ElementList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Container.CanvasSize = UDim2.new(0, 0, 0, ElementList.AbsoluteContentSize.Y + 4)
    end)

    spawn(function()
        wait(0.2)
        MainFrame.Visible = true
    end)

    InputService.InputBegan:Connect(function(input, IsTyping)
        if input.KeyCode == Enum.KeyCode[Library.Theme.HideKey] and not IsTyping then
            MainFrame.Visible = not MainFrame.Visible
        end
    end)

    local InMain = {}

    function InMain.Checkbox(config)
        local Checkbox = CreateModule.Instance("TextButton", {
            Parent = Container,
            Name = config.Name,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0.95, 0, 0, 30),
            Font = Enum.Font[Library.Theme.Font],
            Text = "",
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            AutoButtonColor = false,
            ZIndex = 3
        })

        CreateModule.Instance("TextLabel", {
            Parent = Checkbox,
            Name = "Label",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 5, 0, 0),
            Size = UDim2.new(0.7, 0, 1, 0),
            Font = Enum.Font[Library.Theme.Font],
            Text = config.Name,
            TextSize = 16,
            TextColor3 = Library.Theme.FontColor,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 3
        })

        local CheckFrame = CreateModule.Instance("Frame", {
            Parent = Checkbox,
            Name = "CheckFrame",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(1, -25, 0.5, -10),
            Size = UDim2.new(0, 20, 0, 20),
            ZIndex = 3
        })

        local CheckFrameInner = CreateModule.Instance("Frame", {
            Parent = CheckFrame,
            Name = "CheckFrameInner",
            BackgroundColor3 = Library.Theme.Accent,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 3
        })

        local CheckStroke = CreateModule.Instance("UIStroke", {
            Parent = CheckFrame,
            Name = "Stroke",
            Thickness = 1,
            Color = Library.Theme.ElementBorder,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        })

        local CheckMark = CreateModule.Instance("ImageLabel", {
            Parent = CheckFrame,
            Name = "CheckMark",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 2, 0, 2),
            Size = UDim2.new(1, -4, 1, -4),
            Image = "rbxassetid://10709790644",
            ImageColor3 = Color3.fromRGB(255, 255, 255),
            ImageTransparency = 1,
            ZIndex = 3
        })

        CheckMark.Visible = IsActive.Value

        IsActive.Changed:Connect(function()
            CheckMark.Visible = IsActive.Value
            if IsActive.Value then
                CheckStroke.Transparency = 1
                TweenService:Create(CheckFrameInner, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
                TweenService:Create(CheckMark, TweenInfo.new(0.2), {ImageTransparency = 0}):Play()
            else
                CheckStroke.Transparency = 0
                TweenService:Create(CheckFrameInner, TweenInfo.new(0.2), {BackgroundTransparency = 1}):Play()
                TweenService:Create(CheckMark, TweenInfo.new(0.2), {ImageTransparency = 1}):Play()
            end
            spawn(function() config.Callback(IsActive.Value) end)
        end)

        Checkbox.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                IsActive.Value = not IsActive.Value
            end
        end)

        AddToReg(Checkbox)
        return Checkbox
    end

    function InMain.Label(config)
        local Label = CreateModule.Instance("TextLabel", {
            Parent = Container,
            Name = config.Name,
            BackgroundColor3 = Library.Theme.Element,
            BackgroundTransparency = Library.Theme.ElementTransparency,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0.95, 0, 0, 30),
            Font = Enum.Font[Library.Theme.Font],
            Text = config.Name,
            TextSize = 16,
            TextColor3 = Library.Theme.FontColor,
            TextXAlignment = Enum.TextXAlignment.Center,
            ZIndex = 3
        })

        CreateModule.Instance("UICorner", {
            Parent = Label,
            Name = "Corner",
            CornerRadius = UDim.new(0, 4)
        })

        CreateModule.Instance("UIStroke", {
            Parent = Label,
            Name = "Stroke",
            Thickness = 1,
            Color = Library.Theme.ElementBorder,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        })

        AddToReg(Label)
        return Label
    end

    function InMain.Button(config)
        local Button = CreateModule.Instance("TextButton", {
            Parent = Container,
            Name = config.Name,
            BackgroundColor3 = Library.Theme.Element,
            BackgroundTransparency = Library.Theme.ElementTransparency,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0.95, 0, 0, 30),
            Font = Enum.Font[Library.Theme.Font],
            Text = config.Name,
            TextSize = 16,
            TextColor3 = Library.Theme.FontColor,
            TextXAlignment = Enum.TextXAlignment.Center,
            AutoButtonColor = false,
            ZIndex = 3
        })

        CreateModule.Instance("UICorner", {
            Parent = Button,
            Name = "Corner",
            CornerRadius = UDim.new(0, 4)
        })

        CreateModule.Instance("UIStroke", {
            Parent = Button,
            Name = "Stroke",
            Thickness = 1,
            Color = Library.Theme.ElementBorder,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        })

        Button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = Library.Theme.Accent, BackgroundTransparency = 0}):Play()
            end
        end)

        Button.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = Library.Theme.Element, BackgroundTransparency = Library.Theme.ElementTransparency}):Play()
            end
        end)

        Button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                spawn(function() config.Callback() end)
            end
        end)

        AddToReg(Button)
        return Button
    end

    return InMain
end

return Library